name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Lint and test job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run type check
      run: npx tsc --noEmit
      
    - name: Build application
      run: npm run build
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_URL: redis://localhost:6379
        NEXTAUTH_SECRET: test-secret
        JWT_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

  # Docker build and test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: govardhan-goshala:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          MONGODB_URI=mongodb://admin:goshala123@mongodb:27017/goshala?authSource=admin
          REDIS_URL=redis://redis:6379
          NEXTAUTH_SECRET=test-secret
          JWT_SECRET=test-secret

  # Integration tests with Docker Compose
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: goshala123
          MONGO_INITDB_DATABASE: goshala
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until mongosh --host localhost:27017 --username admin --password goshala123 --authenticationDatabase admin --eval "db.adminCommand(\"ping\")"; do sleep 2; done'
        timeout 60 bash -c 'until redis-cli -h localhost ping; do sleep 2; done'
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        MONGODB_URI: mongodb://admin:goshala123@localhost:27017/goshala?authSource=admin
        REDIS_URL: redis://localhost:6379
        NEXTAUTH_SECRET: test-secret
        JWT_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build, integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
